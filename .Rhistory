dia <- read.table('Diabetes.txt', header = TRUE)
dia <- dia[, -which(names(dia) == 'row')]
summary(dia)
# your code here
corrplot(dia)
# your code here
corrplot(cor(dia))
# your code here
corrplot(cor(dia[,-9]))
# your code here
plot(dia$glucose, dia$diabetes,
main = 'Glucose vs. Diabetes',
xlab = 'Plasma Glucose Concentration',
ylab = 'Has diabetes')
# your code here
library(gridExtra)
# your code here
library(gridExtra)
grid.arrange(2,2)
# your code here
library(gridExtra)
p1 <- plot(dia$glucose, dia$diabetes,
main = 'Glucose vs. Diabetes',
xlab = 'Plasma Glucose Concentration',
ylab = 'Has diabetes')
p2 <- plot(dia$bmi, dia$diabetes,
main = 'BMI vs. Diabetes',
xlab = 'Body Mass Index',
ylab = 'Has diabetes')
p3 <- plot(dia$pedigree, dia$diabetes,
main = 'Family History of Diabetes vs. Individual having Diabetes',
xlab = 'Prevalence of Diabetes in Family',
ylab = 'Individual has Diabetes')
p4 <- plot(dia$age, dia$diabetes,
main = 'Age vs. Diabetes',
xlab = 'Age (Years)',
ylab = 'Has diabetes')
grid.arrange(p1,p2,p3,p4)
p1 <- plot(dia$glucose, dia$diabetes,
main = 'Glucose vs. Diabetes',
xlab = 'Plasma Glucose Concentration',
ylab = 'Has diabetes')
# your code here
library(gridExtra)
p1 <- plot(dia$glucose, dia$diabetes,
main = 'Glucose vs. Diabetes',
xlab = 'Plasma Glucose Concentration',
ylab = 'Has diabetes')
p2 <- plot(dia$bmi, dia$diabetes,
main = 'BMI vs. Diabetes',
xlab = 'Body Mass Index',
ylab = 'Has diabetes')
p3 <- plot(dia$pedigree, dia$diabetes,
main = 'Family History of Diabetes vs. Individual having Diabetes',
xlab = 'Prevalence of Diabetes in Family',
ylab = 'Individual has Diabetes')
p4 <- plot(dia$age, dia$diabetes,
main = 'Age vs. Diabetes',
xlab = 'Age (Years)',
ylab = 'Has diabetes')
grid.arrange(p1,p2,p3,p4, nrow = 2)
# your code here
library(gridExtra)
p1 <- plot(dia$glucose, dia$diabetes,
main = 'Glucose vs. Diabetes',
xlab = 'Plasma Glucose Concentration',
ylab = 'Has diabetes')
p2 <- plot(dia$bmi, dia$diabetes,
main = 'BMI vs. Diabetes',
xlab = 'Body Mass Index',
ylab = 'Has diabetes')
p3 <- plot(dia$pedigree, dia$diabetes,
main = 'Family History of Diabetes vs. Individual having Diabetes',
xlab = 'Prevalence of Diabetes in Family',
ylab = 'Individual has Diabetes')
p4 <- plot(dia$age, dia$diabetes,
main = 'Age vs. Diabetes',
xlab = 'Age (Years)',
ylab = 'Has diabetes')
p1 <- recordPlot()
p2 <- recordPlot()
p3 <- recordPlot()
p4 <- recordPlot()
grid.arrange(p1,p2,p3,p4, nrow = 2)
View(p1)
# your code here
library(gridExtra)
p1 <- plot(dia$glucose, dia$diabetes,
main = 'Glucose vs. Diabetes',
xlab = 'Plasma Glucose Concentration',
ylab = 'Has diabetes')
p2 <- plot(dia$bmi, dia$diabetes,
main = 'BMI vs. Diabetes',
xlab = 'Body Mass Index',
ylab = 'Has diabetes')
p3 <- plot(dia$pedigree, dia$diabetes,
main = 'Family History of Diabetes vs. Individual having Diabetes',
xlab = 'Prevalence of Diabetes in Family',
ylab = 'Individual has Diabetes')
p4 <- plot(dia$age, dia$diabetes,
main = 'Age vs. Diabetes',
xlab = 'Age (Years)',
ylab = 'Has diabetes')
p4 <- plot(dia$age, jitter(dia$diabetes),
main = 'Age vs. Diabetes',
xlab = 'Age (Years)',
ylab = 'Has diabetes')
p4 <- plot(jitter(dia$age), dia$diabetes,
main = 'Age vs. Diabetes',
xlab = 'Age (Years)',
ylab = 'Has diabetes')
p3 <- plot(jitter(dia$pedigree), dia$diabetes,
main = 'Family History of Diabetes vs. Individual having Diabetes',
xlab = 'Prevalence of Diabetes in Family',
ylab = 'Individual has Diabetes')
p2 <- plot(jitter(dia$bmi), dia$diabetes,
main = 'BMI vs. Diabetes',
xlab = 'Body Mass Index',
ylab = 'Has diabetes')
p1 <- plot(jitter(dia$glucose), dia$diabetes,
main = 'Glucose vs. Diabetes',
xlab = 'Plasma Glucose Concentration',
ylab = 'Has diabetes')
# your code here
plot(dia$pregnant, jitter(dia$diabetes),
main = 'Pregnancy vs. Diabetes',
xlab = 'Whether Pregnant',
ylab = 'Whether has Diabetes')
# your code here
plot(dia$pregnant, jitter(dia$diabetes),
main = 'Pregnancy vs. Diabetes',
xlab = 'Number of Pregnancies',
ylab = 'Whether has Diabetes')
plot(dia$diastolic, jitter(dia$diabetes),
main = 'Diastolic Blood Pressure vs. Diabetes',
xlab = 'Diastolic Blood Pressure',
ylab = 'Whether has Diabetes')
plot(dia$triceps, jitter(dia$diabetes),
main = 'Tricep Skin Fold Thickness vs. Diabetes',
xlab = 'Tricep Skin Fold Thickness (mm)',
ylab = 'Whether has Diabetes')
plot(dia$insulin, jitter(dia$diabetes),
main = '2 hour serum insulin vs. Diabetes',
xlab = '2 hour serum insulin (mu U/ml)',
ylab = 'Whether has Diabetes')
# load packages here
library(tidyverse)
library(corrplot)  # for the correlation matrix
library(bestglm)  # for variable selection
library(car)  # for the VIFs
library(pROC)  # for the ROC curve
library(ROCR)  # for the color-coded ROC curve
# your code here
dia_best_subsets_bic <- bestglm(as.data.frame(dia),
IC = "BIC",
method = "exhaustive",
TopModels = 1,
family = binomial)
summary(dia_best_subsets_bic$BestModel)
View(dia)
# your code here
diabetes_logistic <- glm(diabetes ~ age + glucose + bmi + pedigree,
data = dia,
family = binomial(link = "logit"))
summary(diabetes_logistic)
# your code here
scatter.smooth(x = dia$age, y = as.numeric(dia$diabetes) - 1)
scatter.smooth(x = dia$glucose, y = as.numeric(dia$diabetes) - 1)
scatter.smooth(x = dia$bmi, y = as.numeric(dia$diabetes) - 1)
scatter.smooth(x = dia$pedigree, y = as.numeric(dia$diabetes) - 1)
# your code here
plot(diabetes_logistic, which = 5, cook.levels = .5)
# your code here
vif(diabetes_logistic)
View(diabetes_logistic)
# your code here
beta_bmi <- diabetes_logistic$bmi[1]
# your code here
beta_bmi <- diabetes_logistic$coefficients[4]
# your code here
beta_bmi <- double(diabetes_logistic$coefficients[4])
# your code here
beta_bmi <- diabetes_logistic$coefficients[4]
# your code here
beta_bmi <- as.double(diabetes_logistic$coefficients[4])
bmi_ratio <- exp(beta_bmi_logodd)
# your code here
beta_bmi_logodd <- as.double(diabetes_logistic$coefficients[4])
bmi_ratio <- exp(beta_bmi_logodd)
# your code here
beta_bmi_logodd <- as.double(diabetes_logistic$coefficients[4])
bmi_ratio <- exp(beta_bmi_logodd)
bmi_percent <- 100 * (bmi_ratio - 1)
beta_bmi_logodd
bmi_ratio
bmi_percent
# your code here
confint(diabetes_logistic)
# your code here
confint(diabetes_logistic$bmi)
# your code here
confint(diabetes_logistic, "bmi")
#Second confidence interval
exp(confint(diabetes_logistic, "bmi"))
#Final confidence interval
100 * (exp(confint(diabetes_logistic, "bmi")) - 1)
View(dia_best_subsets_bic)
View(diabetes_logistic)
# your code here
new_patient <- data.frame(age = 25,
bmi = 25.1,
glucose = 90,
pedigree = 1.268)
log_odds <- predict(diabetes_logistic,
newdata = new_patient,
se.fit = TRUE)
moe <- qnorm(p = .975, lower.tail = TRUE) * log_odds$se.fit
moe
pred_interval <- log_odds$fit + c(-1, 0, 1) * moe
exp(pred_interval) / (1 + exp(pred_interval))
exp(pred_interval) / (1 + exp(pred_interval))
# your code here
# Likelihood ratio test statistic
like_ratio <- diabetes_logistic$null.deviance - diabetes_logistic$deviance
# Likelihood ratio p-value
pchisq(q = like_ratio,
df = length(coef(diabetes_logistic)) - 1,
lower.tail = FALSE)
# your code here
1 - (diabetes_logistic$deviance / diabetes_logistic$null.deviance)
# your code here
dia_preds <- predict(dia_logistic,
type = "response")
# your code here
dia_preds <- predict(diabetes_logistic,
type = "response")
# Look at the first few predictions:
head(dia_preds)
possible_cutoffs <- seq(0, 1, by = .01)
percent_missclass <- rep(NA, length(possible_cutoffs))
for(i in 1:length(possible_cutoffs)){
classify <- ifelse(dia_preds > possible_cutoffs[i], 1, 0)
percent_missclass[i] <- mean(classify != dia$diabetes)
}
percent_missclass
missclass_df <- as.data.frame(cbind(percent_missclass, possible_cutoffs))
# plot the misclassification rate against the cut-off value:
ggplot(data = missclass_df) +
geom_line(aes(x = possible_cutoffs, y = percent_missclass))
# choose the "best" cut-off that minimizes the percent misclassified:
cutoff_best <- possible_cutoffs[which.min(percent_missclass)]
percent_missclass == min(percent_missclass)
percent_missclass == min(percent_missclass)
cutoff_best <- possible_cutoffs[which.min(percent_missclass)]
cutoff_best
# your code here
dia_preds <- predict(diabetes_logistic,
type = "response")
# Look at the first few predictions:
head(dia_preds)
possible_cutoffs <- seq(0, 1, by = .01)
percent_missclass <- rep(NA, length(possible_cutoffs))
for(i in 1:length(possible_cutoffs)){
classify <- ifelse(dia_preds > possible_cutoffs[i], 1, 0)
percent_missclass[i] <- mean(classify != dia$diabetes)
}
percent_missclass
missclass_df <- as.data.frame(cbind(percent_missclass, possible_cutoffs))
# plot the misclassification rate against the cut-off value:
ggplot(data = missclass_df) +
geom_line(aes(x = possible_cutoffs, y = percent_missclass))
# choose the "best" cut-off that minimizes the percent misclassified:
cutoff_best <- possible_cutoffs[which.min(percent_missclass)]
percent_missclass == min(percent_missclass)
print(cutoff_best)
# your code here
dia_preds <- predict(diabetes_logistic,
type = "response")
# Look at the first few predictions:
head(dia_preds)
possible_cutoffs <- seq(0, 1, by = .01)
percent_missclass <- rep(NA, length(possible_cutoffs))
for(i in 1:length(possible_cutoffs)){
classify <- ifelse(dia_preds > possible_cutoffs[i], 1, 0)
percent_missclass[i] <- mean(classify != dia$diabetes)
}
percent_missclass
missclass_df <- as.data.frame(cbind(percent_missclass, possible_cutoffs))
ggplot(data = missclass_df) +
geom_line(aes(x = possible_cutoffs, y = percent_missclass))
cutoff_best <- possible_cutoffs[which.min(percent_missclass)]
percent_missclass == min(percent_missclass)
print(cutoff_best)
# your code here
preds <- dia_preds > cutoff_best
conf_mat <- table("truth" = dia$diabetes, "predicted" = preds)
conf_mat
addmargins(conf_mat)
# your code here
correct_negatives <- 230
total_negatives <- 274
correct_negatives / total_negatives
# your code here
total_positive <- 118
true_positive <- 86
true_positive / total_positive
# your code here
(true_positive + correct_negatives) / 392
# your code here
my_roc <- roc(dia$diabetes, dia_preds)
ggplot() +
geom_path(mapping = aes(x = 1 - my_roc$specificities,
y = my_roc$sensitivities),
linewidth = 2) +
geom_abline(slope = 1, intercept = 0) +
theme_bw() +
xlab("1 - Specificity (False Positive Rate)") +
ylab("Sensitivity (True Positive Rate)") +
theme(aspect.ratio = 1)
# your code here
auc(my_roc)
library(tidyverse)
datesData <- read.csv('dates.csv')
datesData <- read.csv('dates.csv', header = TRUE)
setwd('330Folder')
datesData <- read.csv('dates.csv', header = TRUE)
View(datesData)
malesData <- datesData[datesDate['sex' == 'Male']]
datesData <- read.csv('dates.csv', header = TRUE)
malesData <- datesData[datesDate['sex' == 'Male']]
datesData <- read.csv('dates.csv', header = TRUE)
malesData <- datesData[datesData['sex' == 'Male']]
datesData <- read.csv('dates.csv', header = TRUE)
malesData <- datesData[datesData['sex'] == 'Male']]
malesData <- datesData[datesData$Sex == 'Male']]
datesData <- read.csv('dates.csv', header = TRUE)
malesData <- datesData[datesData$Sex == 'Male']
malesData <- datesData[datesData$Sex == 'Male',]
View(malesData)
row.names(malesData) <- NULL
View(malesData)
#Imports the entire dataframe
datesData <- read.csv('dates.csv', header = TRUE)
#seperates the dataframe into a male and a female section
malesData <- datesData[datesData$Sex == 'Male',]
row.names(malesData) <- NULL
femalesData <- datesData[datesData$Sex == 'Female',]
row.names(femalesData) <- NULL
priorMalesZero <- seq(0, length = 90)
priorMalesOne <- seq(1, length = 76)
priorMalesTwo <- seq(2, length = 64)
priorMalesThree <- seq(3, length = 48)
priorMalesFour <- seq(4, length = 26)
priorMalesFive <- seq(5, length = 21)
priorMalesSix <- seq(6, length = 25)
priorMale <- c(priorMalesZero, priorMalesOne, priorMalesTwo, priorMalesThree, priorMalesFour, priorMalesFive, priorMalesSix)
priorMalesZero <- seq(0, length = 90)
priorMalesOne <- seq(1, length = 76)
priorMalesTwo <- seq(2, length = 64)
priorMalesThree <- seq(3, length = 48)
priorMalesFour <- seq(4, length = 26)
priorMalesFive <- seq(5, length = 21)
priorMalesSix <- seq(6, length = 25)
priorMale <- c(priorMalesZero, priorMalesOne, priorMalesTwo, priorMalesThree, priorMalesFour, priorMalesFive, priorMalesSix)
priorFemalesZero <- seq(0, length = 140)
priorFemalesOne <- seq(1, length = 84)
priorFemalesTwo <- seq(2, length = 46)
priorFemalesThree <- seq(3, length = 35)
priorFemalesFour <- seq(4, length = 17)
priorFemalesFive <- seq(5, length = 8)
priorFemalesSix <- seq(6, length = 20)
priorFemale <- c(priorFemalesZero, priorFemalesOne, priorFemalesTwo, priorFemalesThree, priorFemalesFour, priorFemalesFive, priorFemalesSix)
priorMalesZero <- seq(0,0, length = 90)
priorMalesZero <- seq(0,0, length = 90)
priorMalesOne <- seq(1,1, length = 76)
priorMalesTwo <- seq(2,2, length = 64)
priorMalesThree <- seq(3,3, length = 48)
priorMalesFour <- seq(4,4, length = 26)
priorMalesFive <- seq(5,5, length = 21)
priorMalesSix <- seq(6,6, length = 25)
priorMale <- c(priorMalesZero, priorMalesOne, priorMalesTwo, priorMalesThree, priorMalesFour, priorMalesFive, priorMalesSix)
priorFemalesZero <- seq(0,0, length = 140)
priorFemalesOne <- seq(1,1, length = 84)
priorFemalesTwo <- seq(2,2, length = 46)
priorFemalesThree <- seq(3,3, length = 35)
priorFemalesFour <- seq(4,4, length = 17)
priorFemalesFive <- seq(5,5, length = 8)
priorFemalesSix <- seq(6,6, length = 20)
priorFemale <- c(priorFemalesZero, priorFemalesOne, priorFemalesTwo, priorFemalesThree, priorFemalesFour, priorFemalesFive, priorFemalesSix)
meanPriorMales <- mean(priorMale)
meanPriorMales <- mean(priorMale)
priorA <- mean(priorMale)
priorB <- sqrt(2)
X <- seq(0,6, length = 1001)
plot(X, dgamma(X, shape = priorA, rate = priorB), type = 'l',
main = 'Prior Distribtion for Males',
xlab = 'Lambda',
ylab = 'Density')
meanPriorMales <- mean(priorMale)
priorA <- mean(priorMale) *2
priorB <- sqrt(2)
X <- seq(0,6, length = 1001)
plot(X, dgamma(X, shape = priorA, rate = priorB), type = 'l',
main = 'Prior Distribtion for Males',
xlab = 'Lambda',
ylab = 'Density')
meanPriorMales <- mean(priorMale)
priorA <- mean(priorMale) * 2
priorB <- 2
X <- seq(0,6, length = 1001)
plot(X, dgamma(X, shape = priorA, rate = priorB), type = 'l',
main = 'Prior Distribtion for Males',
xlab = 'Lambda',
ylab = 'Density')
meanPriorFemales <- mean(priorFemale)
priorA.f <- mean(priorFemale) * 2
priorB.f <- 2
X <- seq(0,6, length = 1001)
plot(X, dgamma(X, shape = priorA.f, rate = priorB.f), type = 'l',
main = 'Prior Distribtion for Females',
xlab = 'Lambda',
ylab = 'Density')
meanPriorFemales <- mean(priorFemale)
meanPriorFemales <- mean(priorFemale)
priorA.f <- mean(priorFemale) * 2
priorB.f <- 2
X <- seq(0,6, length = 1001)
plot(X, dgamma(X, shape = priorA.f, rate = priorB.f), type = 'l',
main = 'Prior Distribtion for Females',
xlab = 'Lambda',
ylab = 'Density')
meanPriorFemales <- mean(priorFemale)
priorA.f <- mean(priorFemale) * 2
priorB.f <- 1.5
X <- seq(0,6, length = 1001)
plot(X, dgamma(X, shape = priorA.f, rate = priorB.f), type = 'l',
main = 'Prior Distribtion for Females',
xlab = 'Lambda',
ylab = 'Density')
setwd('stat330Project')
setwd('stat330Project')
data <- read.table('student-mat.csv')
data <- read.csv('student-mat.csv', sep = ';')
View(data)
dataCleaned <- data[-c(1, 7:14, 18:20, 24:29)]
View(dataCleaned)
data <- read.csv('student-mat.csv', sep = ';')
dataCleaned <- data[-c(1, 7:14, 18:20, 24:29)]
write.csv(dataCleaned, "cleanedMathData.csv", row.names = FALSE)
#This code does not need to be run again
#This code can almost certainly be removed from the report
data <- read.csv('student-mat.csv', sep = ';')
dataCleaned <- data[-c(1, 7:14, 18:20, 24:29)]
dataCleaned$female = dataCleaned$sex == 'F'
dataCleaned$rural = dataCleaned$address == 'R'
dataCleaned$bigFamily = dataCleaned$famsize == 'GT3'
dataCleaned$parentsApart = dataCleaned$Pstatus == 'A'
dataCleaned$extraSchool = dataCleaned$schoolsup == 'yes'
dataCleaned$familyHelp = dataCleaned$famsup == 'yes'
dataCleaned$seeksCollege = dataCleaned$higher == 'yes'
dataCleaned$internet = dataCleaned$internet == 'yes'
dataCleaned$significantOther = dataCleaned$romantic == 'yes'
write.csv(dataCleaned, "cleanedMathData.csv", row.names = FALSE)
#This code does not need to be run again
#This code can almost certainly be removed from the report
data <- read.csv('student-mat.csv', sep = ';')
dataCleaned <- data[-c(1, 7:14, 18:20, 24:29)]
dataCleaned$female = dataCleaned$sex == 'F'
dataCleaned$rural = dataCleaned$address == 'R'
dataCleaned$bigFamily = dataCleaned$famsize == 'GT3'
dataCleaned$parentsApart = dataCleaned$Pstatus == 'A'
dataCleaned$extraSchool = dataCleaned$schoolsup == 'yes'
dataCleaned$familyHelp = dataCleaned$famsup == 'yes'
dataCleaned$seeksCollege = dataCleaned$higher == 'yes'
dataCleaned$internet = dataCleaned$internet == 'yes'
dataCleaned$significantOther = dataCleaned$romantic == 'yes'
write.csv(dataCleaned, "cleanedMathData.csv", row.names = FALSE)
View(dataCleaned)
#This code does not need to be run again
#This code can almost certainly be removed from the report
data <- read.csv('student-mat.csv', sep = ';')
dataCleaned <- data[-c(1, 7:14, 18:20, 24:29)]
dataCleaned$female = dataCleaned$sex == 'F'
dataCleaned$rural = dataCleaned$address == 'R'
dataCleaned$bigFamily = dataCleaned$famsize == 'GT3'
dataCleaned$parentsApart = dataCleaned$Pstatus == 'A'
dataCleaned$extraSchool = dataCleaned$schoolsup == 'yes'
dataCleaned$familyHelp = dataCleaned$famsup == 'yes'
dataCleaned$seeksCollege = dataCleaned$higher == 'yes'
dataCleaned$internet = dataCleaned$internet == 'yes'
dataCleaned$significantOther = dataCleaned$romantic == 'yes'
dataCleaned <- data[-c(1, 3:5, 7:11)]
write.csv(dataCleaned, "cleanedMathData.csv", row.names = FALSE)
View(dataCleaned)
#This code does not need to be run again
#This code can almost certainly be removed from the report
data <- read.csv('student-mat.csv', sep = ';')
dataCleaned <- data[-c(1, 7:14, 18:20, 24:29)]
dataCleaned$female = dataCleaned$sex == 'F'
dataCleaned$rural = dataCleaned$address == 'R'
dataCleaned$bigFamily = dataCleaned$famsize == 'GT3'
dataCleaned$parentsApart = dataCleaned$Pstatus == 'A'
dataCleaned$extraSchool = dataCleaned$schoolsup == 'yes'
dataCleaned$familyHelp = dataCleaned$famsup == 'yes'
dataCleaned$seeksCollege = dataCleaned$higher == 'yes'
dataCleaned$internet = dataCleaned$internet == 'yes'
dataCleaned$significantOther = dataCleaned$romantic == 'yes'
dataCleaned <- dataCleaned[-c(1, 3:5, 7:11)]
write.csv(dataCleaned, "cleanedMathData.csv", row.names = FALSE)
View(dataCleaned)
fullDataSet <- read.csv('cleanedMathData.csv')
View(fullDataSet)
